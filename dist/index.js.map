{"version":3,"file":"index.js","sources":["../lib/fs/path-utils.ts","../lib/compiler/create-parse-config-host.ts","../lib/compiler/config-parser.ts","../lib/compiler/create-compiler-host.ts","../lib/compiler/format-diagnostics-host.ts","../lib/cache.ts","../lib/fs/file-utils.ts","../lib/cache/directory-entries-cache-delegate.ts","../lib/cache/directory-entries-cache.ts","../lib/compiler/input-io.ts","../lib/helpers.ts","../lib/compiler/output-patcher.ts","../lib/fs/parse-path.ts","../lib/cache/path-info-cache-delegate.ts","../lib/cache/path-info-cache.ts","../lib/fs/resolve.ts","../lib/cache/resolution-cache-delegate.ts","../lib/cache/resolution-cache.ts","../lib/compiler/path-resolver.ts","../lib/compiler/source-cache.ts","../lib/compiler.ts","../lib/normalize-options.ts","../lib/plugin.ts","../lib/compat/filter.ts"],"sourcesContent":["import * as ts from \"typescript\";\nimport { Path } from \"../interfaces\";\n\nconst enum CharCode {\n  Slash = 47,\n}\n\nexport const useCaseSensitiveFileNames = ts.sys.useCaseSensitiveFileNames;\nexport const getCanonicalFileName = ts.sys.useCaseSensitiveFileNames\n  ? (fileName: string) => fileName\n  : (fileName: string) => fileName.toLowerCase();\n\nexport const defaultLibLocation = ts.getDirectoryPath(toPath(ts.sys.getExecutingFilePath()));\n\nexport function normalizePath(path: string) {\n  if (path.length === 0) {\n    return path;\n  }\n  return trimTrailingSlash(getCanonicalFileName(ts.normalizePath(path)));\n}\n\nexport function isWithin(rootPath: Path, path: Path) {\n  return path.length > rootPath.length &&\n         path.lastIndexOf(rootPath, 0) === 0 &&\n         path.charCodeAt(rootPath.length) === CharCode.Slash;\n}\n\nexport function relativePathWithin(root: Path, path: Path): string | undefined {\n  let relativePath: string | undefined;\n  if (path.length > root.length &&\n      path.lastIndexOf(root, 0) === 0 &&\n      path.charCodeAt(root.length) === CharCode.Slash) {\n    relativePath = path.substring(root.length + 1);\n  } else if (path === root) {\n    relativePath = \"\";\n  }\n  return relativePath;\n}\n\nexport function toPath(fileName: string, basePath?: Path): Path {\n  const p = ts.toPath(\n    fileName,\n    basePath === undefined ?\n      currentDirectory() : basePath, getCanonicalFileName);\n  return trimTrailingSlash(p);\n}\n\nexport { getDirectoryPath } from \"typescript\";\n\nfunction trimTrailingSlash(path: Path): Path;\nfunction trimTrailingSlash(path: string): string;\nfunction trimTrailingSlash(path: string) {\n  if (path.charCodeAt(path.length - 1) === CharCode.Slash) {\n    return path.slice(0, path.length - 1);\n  }\n  return path;\n}\n\nfunction currentDirectory() {\n  return normalizePath(process.cwd()) as Path;\n}\n\n// tslint:disable\ndeclare module \"typescript\" {\n  export function getDirectoryPath(path: ts.Path): ts.Path;\n  export function getDirectoryPath(path: string): string;\n\n  export function normalizePath(path: string): string;\n  export function toPath(fileName: string, basePath: string, getCanonicalFileName: (path: string) => string): ts.Path;\n}\n","import { matchFiles, ParseConfigHost } from \"typescript\";\nimport { useCaseSensitiveFileNames } from \"../fs/path-utils\";\nimport { Path } from \"../interfaces\";\nimport InputIO from \"./input-io\";\n\nexport default function createParseConfigHost(rootPath: Path, input: InputIO): ParseConfigHost {\n  const currentDirectory = rootPath;\n\n  function getFileSystemEntries(path: string) {\n    return input.getFileSystemEntries(path);\n  }\n\n  function readDirectory(rootDir: string, extensions: string[], excludes: string[], includes: string[]): string[] {\n    return matchFiles(\n      rootDir, extensions, excludes, includes,\n      useCaseSensitiveFileNames, currentDirectory, getFileSystemEntries);\n  }\n\n  function fileExists(path: string): boolean {\n    return input.fileExists(path);\n  }\n\n  function readFile(path: string): string {\n    return input.readFile(path) as string;\n  }\n\n  return {\n    fileExists,\n    readDirectory,\n    readFile,\n    useCaseSensitiveFileNames,\n  };\n}\n\n// tslint:disable\ndeclare module \"typescript\" {\n  export interface FileSystemEntries {\n    files: string[];\n    directories: string[];\n  }\n  export function matchFiles(path: string, extensions: string[], excludes: string[], includes: string[], useCaseSensitiveFileNames: boolean, currentDirectory: string, getFileSystemEntries: (path: string) => FileSystemEntries): string[];\n}\n","import {\n  CompilerOptions,\n  convertCompilerOptionsFromJson,\n  Diagnostic,\n  findConfigFile,\n  ParseConfigHost,\n  ParsedCommandLine,\n  parseJsonConfigFileContent,\n  readConfigFile,\n} from \"typescript\";\nimport {getDirectoryPath } from \"../fs/path-utils\";\nimport { CompilerOptionsConfig, Path } from \"../interfaces\";\nimport createParseConfigHost from \"./create-parse-config-host\";\nimport Input from \"./input-io\";\n\nexport default class ConfigParser {\n  private host: ParseConfigHost;\n\n  constructor(private rootPath: Path,\n              private rawConfig: CompilerOptionsConfig | undefined,\n              private configFileName: string | undefined,\n              private compilerOptions: CompilerOptionsConfig | undefined,\n              input: Input) {\n    this.host = createParseConfigHost(rootPath, input);\n  }\n\n  public parseConfig(): ParsedCommandLine {\n    let rawConfig = this.rawConfig;\n    const rootPath = this.rootPath;\n    const host = this.host;\n    const errors: Diagnostic[] = [];\n    let readResult: {\n      config?: any,\n      error?: Diagnostic,\n    } | undefined;\n    let configFileName: Path | undefined;\n    if (!rawConfig) {\n      configFileName = this.resolveConfigFileName();\n      if (configFileName) {\n        readResult = readConfigFile(configFileName, host.readFile);\n        if (readResult.error) {\n          errors.push(readResult.error);\n        } else {\n          rawConfig = readResult.config;\n        }\n      }\n    }\n    if (!rawConfig) {\n      rawConfig = {};\n    }\n    const basePath = configFileName ? getDirectoryPath(configFileName) : rootPath;\n    let compilerOptions: CompilerOptions | undefined;\n    if (this.compilerOptions) {\n      const convertResult = convertCompilerOptionsFromJson(this.compilerOptions, basePath);\n      compilerOptions = convertResult.options;\n      if (convertResult.errors) {\n        errors.push.apply(errors, convertResult.errors);\n      }\n    }\n    const result = parseJsonConfigFileContent(\n      rawConfig, host, basePath, compilerOptions, configFileName);\n    result.errors = errors.concat(result.errors);\n    return result;\n  }\n\n  private resolveConfigFileName(): Path {\n    const { configFileName, rootPath, host } = this;\n    return findConfigFile(rootPath, host.fileExists, configFileName) as Path;\n  }\n}\n","import {\n  CompilerHost,\n  CompilerOptions,\n  getDefaultLibFileName,\n  NewLineKind,\n  SourceFile,\n  sys,\n} from \"typescript\";\nimport {\n  defaultLibLocation,\n  getCanonicalFileName,\n  toPath,\n  useCaseSensitiveFileNames,\n} from \"../fs/path-utils\";\nimport { Path } from \"../interfaces\";\nimport InputIO from \"./input-io\";\nimport SourceCache from \"./source-cache\";\n\nexport default function createCompilerHost(\n  rootPath: Path, input: InputIO, sourceCache: SourceCache, compilerOptions: CompilerOptions,\n): CompilerHost {\n  const newLine = getNewLine(compilerOptions);\n  const currentDirectory = rootPath;\n  return {\n    directoryExists: (path) => input.directoryExists(path),\n    fileExists: (path) => input.fileExists(path),\n    getCanonicalFileName,\n    getCurrentDirectory: () => currentDirectory,\n    getDefaultLibFileName: (options) => toPath(getDefaultLibFileName(options), defaultLibLocation),\n    getDefaultLibLocation: () => defaultLibLocation,\n    getDirectories: (path) => input.getDirectories(path),\n    getNewLine: () => newLine,\n    getSourceFile: (fileName) => sourceCache.getSourceFile(fileName) as SourceFile,\n    getSourceFileByPath: (fileName, path) => sourceCache.getSourceFileByPath(fileName, path) as SourceFile,\n    readFile: (path) => input.readFile(path) as string,\n    realpath: (path) => input.realpath(path) as string,\n    trace: (s) => sys.write(s + newLine),\n    useCaseSensitiveFileNames: () => useCaseSensitiveFileNames,\n    writeFile: () => {\n      // we provide a write file on emit.\n      throw new Error(\"compiler host does not write output\");\n    },\n  };\n}\n\nfunction getNewLine(options: CompilerOptions): string {\n  let newLine;\n  if (options.newLine === undefined) {\n    newLine = sys.newLine;\n  } else {\n    newLine = options.newLine === NewLineKind.LineFeed ? \"\\n\" : \"\\r\\n\";\n  }\n  return newLine;\n}\n","import { FormatDiagnosticsHost, sys } from \"typescript\";\n\nconst {\n  getCurrentDirectory,\n  newLine,\n  useCaseSensitiveFileNames,\n} = sys;\n\nfunction getCanonicalFileName(fileName: string): string {\n  return useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();\n}\n\nfunction getNewLine(): string {\n  return newLine;\n}\n\nexport default {\n  getCanonicalFileName,\n  getCurrentDirectory,\n  getNewLine,\n} as FormatDiagnosticsHost;\n","import { CacheDelegate } from \"./interfaces\";\n\nexport default class Cache<K, CK, V> {\n  public hits = 0;\n  public misses = 0;\n  private store = new Map<CK, V>();\n  constructor(private delegate: CacheDelegate<K, CK, V>) {\n  }\n\n  public get(key: K): V {\n    const cacheKey = this.delegate.cacheKey(key);\n    let value = this.store.get(cacheKey);\n    if (value === undefined) {\n      this.misses++;\n      value = this.delegate.create(key);\n      this.store.set(cacheKey, value);\n    } else {\n      this.hits++;\n    }\n    return value;\n  }\n\n  public clear() {\n    this.store.clear();\n  }\n}\n","import { createHash } from \"crypto\";\nimport { readdirSync, readFileSync, Stats, statSync } from \"fs\";\nimport { DirEntries, FileContent, Path, PathResolver, Resolution } from \"../interfaces\";\n\nexport function readFile(path: Path): FileContent {\n  const buffer = readFileSync(path);\n  const hash = createHash(\"sha1\");\n  hash.update(buffer);\n  return { buffer, version: hash.digest(\"hex\") };\n}\n\nexport function readFileResolution(resolution: Resolution) {\n  let path: Path | undefined;\n  if (resolution.isFile()) {\n    if (resolution.isInput()) {\n      path = resolution.pathInInput;\n    } else {\n      path = resolution.path;\n    }\n  }\n  if (path) {\n    return readFile(path);\n  }\n}\n\nexport function stat(path: Path): Stats | undefined {\n  try {\n    return statSync(path);\n  } catch (e) {\n    if (e.code === \"ENOENT\" || e.code === \"EACCES\") {\n      return;\n    }\n    throw e;\n  }\n}\n\nexport function readdir(path: Path, resolver: PathResolver): DirEntries {\n  const prefix = path + \"/\";\n  const files: string[] = [];\n  const directories: string[] = [];\n  for (const entry of readdirSync(path).sort()) {\n    const resolution = resolver.resolve(prefix + entry);\n    if (resolution.isFile()) {\n      files.push(entry);\n    } else if (resolution.isDirectory()) {\n      directories.push(entry);\n    }\n  }\n  return { files, directories };\n}\n","import { readdir } from \"../fs/file-utils\";\nimport { CacheDelegate, DirEntries, Path, PathResolver } from \"../interfaces\";\n\nexport default class DirEntriesCacheDelegate implements CacheDelegate<Path, Path, DirEntries> {\n  constructor(private resolver: PathResolver) {}\n\n  public cacheKey(path: Path): Path {\n    return path;\n  }\n\n  public create(path: Path): DirEntries {\n    return readdir(path, this.resolver);\n  }\n}\n","import Cache from \"../cache\";\nimport { DirEntries, Path, PathResolver } from \"../interfaces\";\nimport DirEntriesCacheDelegate from \"./directory-entries-cache-delegate\";\n\nexport default class DirEntriesCache extends Cache<Path, Path, DirEntries> {\n  constructor(resolver: PathResolver) {\n    super(new DirEntriesCacheDelegate(resolver));\n  }\n}\n","import { realpathSync } from \"fs\";\nimport * as ts from \"typescript\";\nimport DirectoryEntriesCache from \"../cache/directory-entries-cache\";\nimport { DirEntries, Path, PathResolver, Resolution } from \"../interfaces\";\n\nexport default class Input {\n  private entriesCache: DirectoryEntriesCache;\n  private realpathCache: { [path: string]: string } = Object.create(null);\n\n  constructor(private resolver: PathResolver) {\n    this.entriesCache = new DirectoryEntriesCache(resolver);\n  }\n\n  public fileExists(path: string) {\n    return this.resolve(path).isFile();\n  }\n\n  public directoryExists(path: string) {\n    return this.resolve(path).isDirectory();\n  }\n\n  /**\n   * Used for type resolution.\n   *\n   * Will merge the view of input path and root path.\n   */\n  public getDirectories(path: string): string[] {\n    const resolution = this.resolve(path);\n    let directories: string[];\n    if (resolution.isDirectory()) {\n      if (resolution.isInput()) {\n        directories = this.readdir(resolution.pathInInput).directories;\n        if (resolution.isMerged()) {\n          for (const other in this.readdir(resolution.path).directories) {\n            if (directories.indexOf(other) === -1) {\n              directories.push(other);\n            }\n          }\n        }\n      } else {\n        directories = this.readdir(resolution.path).directories;\n      }\n    } else {\n      directories = [];\n    }\n    return directories;\n  }\n\n  /**\n   * Used by config parser for matching input.\n   *\n   * Unlike getDirectories which merges the view of input node and root.\n   * We only allow this to return entries for things within the\n   * broccoli input node.\n   */\n  public getFileSystemEntries(path: string) {\n    const resolution = this.resolve(path);\n    let entries: DirEntries;\n    if (resolution.isDirectory() && resolution.isInput()) {\n      entries = this.readdir(resolution.pathInInput);\n    } else {\n      entries = { files: [], directories: [] };\n    }\n    return entries;\n  }\n\n  public readFile(path: string): string | undefined {\n    const resolution = this.resolve(path);\n    let resolved: Path | undefined;\n    if (resolution.isFile()) {\n      if (resolution.isInput()) {\n        resolved = resolution.pathInInput;\n      } else {\n        resolved = resolution.path;\n      }\n    }\n    if (resolved !== undefined) {\n      return ts.sys.readFile(resolved);\n    }\n  }\n\n  public relativePath(path: string): string | undefined {\n    return this.resolve(path).relativePath;\n  }\n\n  public realpath(path: string): Path | undefined {\n    const resolution = this.resolve(path);\n    if (resolution.isInput()) {\n      return resolution.path;\n    } else if (resolution.exists()) {\n      const realpath = realpathSync(resolution.path, this.realpathCache);\n      return this.resolve(realpath).path;\n    }\n  }\n\n  public reset() {\n    this.entriesCache.clear();\n    this.realpathCache = Object.create(null);\n  }\n\n  private resolve(path: string): Resolution {\n    return this.resolver.resolve(path);\n  }\n\n  private readdir(path: Path) {\n    return this.entriesCache.get(path);\n  }\n}\n","export const FSTree: FSTree.Static = require(\"fs-tree-diff\");\nexport const BroccoliPlugin: BroccoliPlugin.Static = require(\"broccoli-plugin\");\nexport const walkSync: WalkSync = require(\"walk-sync\");\nexport const md5Hex: MD5Hex = require(\"md5-hex\");\nexport const heimdall: Heimdall = require(\"heimdalljs\");\n\ndeclare function require(id: string): any;\n\nexport interface Token {\n  __tokenBrand: any;\n}\n\nexport interface Heimdall {\n  start(name: string): Token;\n  stop(token: Token): void;\n}\n\nexport type MD5Hex = (str: string) => string;\n\nexport namespace BroccoliPlugin {\n  export interface PluginOptions {\n    name?: string;\n    annotation?: string;\n    persistentOutput?: boolean;\n  }\n\n  export interface Plugin {\n    inputPaths: string[];\n    outputPath: string;\n    cachePath: string;\n  }\n\n  export interface Static {\n    new (inputNodes: any[], options?: any): Plugin;\n  }\n}\n\nexport interface WalkSync {\n  (path: string, options?: any): string[];\n  entries(path: string, options?: any): WalkSync.Entry[];\n}\n\nexport namespace WalkSync {\n  export type Row = string | RegExp[];\n\n  export interface Entry {\n    relativePath: string;\n    basePath: string;\n    fullPath: string;\n    mode: number;\n    size: number;\n    mtime: Date;\n    isDirectory(): boolean;\n  }\n}\n\nexport interface FSTree {\n  calculatePatch(next: FSTree, isUnchanged?: (a: WalkSync.Entry, b: WalkSync.Entry) => {}): FSTree.PatchOp[];\n}\n\nexport namespace FSTree {\n  export type Op = \"unlink\" | \"create\" | \"mkdir\" | \"rmdir\" | \"change\";\n\n  export type PatchOp = [Op, string, WalkSync.Entry];\n\n  export interface Static {\n    fromEntries(entries: WalkSync.Entry[], options?: {\n      sortAndExpand?: boolean,\n    }): FSTree;\n  }\n}\n","import * as fs from \"fs\";\nimport { FSTree, md5Hex, walkSync, WalkSync } from \"../helpers\";\n\nexport default class OutputPatcher {\n  private entries: WalkSync.Entry[] = [];\n  private contents = new Map<string, string>();\n  private lastTree: FSTree | undefined = undefined;\n  private isUnchanged: (a: Entry, b: Entry) => boolean;\n\n  constructor(private outputPath: string) {\n    this.isUnchanged = (entryA, entryB) => {\n      if (entryA.isDirectory() && entryB.isDirectory()) {\n        return true;\n      }\n      if (entryA.mode === entryB.mode && entryA.checksum === entryB.checksum) {\n        return true;\n      }\n      return false;\n    };\n  }\n\n  // relativePath should be without leading '/' and use forward slashes\n  public add(relativePath: string, content: string): void {\n    this.entries.push(new Entry(this.outputPath, relativePath, md5Hex(content)));\n    this.contents.set(relativePath, content);\n  }\n\n  public patch() {\n    try {\n      this.lastTree = this._patch();\n    } catch (e) {\n      // walkSync(output);\n      this.lastTree = undefined;\n      throw e;\n    } finally {\n      this.entries = [];\n      this.contents = new Map<string, string>();\n    }\n  }\n\n  private _patch() {\n    const entries = this.entries;\n    let lastTree = this.lastTree;\n    const isUnchanged = this.isUnchanged;\n    const outputPath = this.outputPath;\n    const contents = this.contents;\n    const nextTree = FSTree.fromEntries(entries, { sortAndExpand: true });\n    if (!lastTree) {\n      lastTree = FSTree.fromEntries(walkSync.entries(outputPath));\n    }\n    const patch = lastTree.calculatePatch(nextTree, isUnchanged);\n    patch.forEach((change) => {\n      const op = change[0];\n      const path = change[1];\n      const entry = change[2];\n      switch (op) {\n        case \"mkdir\":\n          // the expanded dirs don't have a base\n          fs.mkdirSync(outputPath + \"/\" + path);\n          break;\n        case \"rmdir\":\n          // the expanded dirs don't have a base\n          fs.rmdirSync(outputPath + \"/\" + path);\n          break;\n        case \"unlink\":\n          fs.unlinkSync(entry.fullPath);\n          break;\n        case \"create\":\n        case \"change\":\n          fs.writeFileSync(entry.fullPath, contents.get(path));\n          break;\n        default: throw new Error(`unrecognized case ${op}`);\n      }\n    });\n    return nextTree;\n  }\n}\n\n/* tslint:disable:max-classes-per-file */\nclass Entry implements WalkSync.Entry {\n  public fullPath: string;\n  public mode: number = 0;\n  public size: number = 0;\n  public mtime: Date = new Date();\n\n  constructor(public basePath: string, public relativePath: string, public checksum: string) {\n    this.fullPath = basePath + \"/\" + relativePath;\n    this.checksum = checksum;\n  }\n\n  public isDirectory() {\n    return false;\n  }\n}\n","import { Path, PathInfo } from \"../interfaces\";\nimport { relativePathWithin, toPath } from \"./path-utils\";\n\nexport default function parsePath(rootPath: Path, inputPath: Path, rawPath: string): PathInfo {\n  let path = toPath(rawPath, rootPath);\n  let pathInInput: Path | undefined;\n  let relativePath = relativePathWithin(rootPath, path);\n  if (relativePath === undefined) {\n    relativePath = relativePathWithin(inputPath, path);\n    if (relativePath !== undefined) {\n      pathInInput = path;\n      path = toPath(relativePath, rootPath);\n    }\n  } else {\n    pathInInput = toPath(relativePath, inputPath);\n  }\n  return {\n    path,\n    pathInInput,\n    relativePath,\n  };\n}\n","import parsePath from \"../fs/parse-path\";\nimport { CacheDelegate, Path, PathInfo} from \"../interfaces\";\n\nexport default class PathInfoCacheDelegate implements CacheDelegate<string, string, PathInfo> {\n  constructor(private rootPath: Path, private inputPath: Path) {\n  }\n\n  public cacheKey(key: string): string {\n    return key;\n  }\n\n  public create(key: string) {\n    return parsePath(this.rootPath, this.inputPath, key);\n  }\n}\n","import Cache from \"../cache\";\nimport { Path, PathInfo } from \"../interfaces\";\nimport PathInfoCacheDelegate from \"./path-info-cache-delegate\";\n\nexport default class PathInfoCache extends Cache<string, string, PathInfo> {\n  constructor(rootPath: Path, inputPath: Path) {\n    super(new PathInfoCacheDelegate(rootPath, inputPath));\n  }\n}\n","import { Stats } from \"fs\";\nimport {\n  DirectoryResolution,\n  FileResolution,\n  InputDirectoryResolution,\n  InputFileResolution,\n  MergedDirectoryResolution,\n  Path,\n  PathInfo,\n  Resolution,\n} from \"../interfaces\";\nimport { stat } from \"./file-utils\";\n\nexport default function resolve(pathInfo: PathInfo): Resolution {\n  let flags = ResolutionFlags.None;\n  let stats: Stats | undefined;\n  let otherStats: Stats | undefined;\n  if (pathInfo.pathInInput) {\n    stats = stat(pathInfo.pathInInput);\n    if (stats !== undefined) {\n      flags |= ResolutionFlags.Input;\n    }\n  }\n  if (stats === undefined) {\n    stats = stat(pathInfo.path);\n  }\n  if (stats !== undefined) {\n    flags |= stats.isDirectory() ? ResolutionFlags.Dir : ResolutionFlags.File;\n  }\n  if ((flags & ResolutionFlags.InputDir) === ResolutionFlags.InputDir) {\n    otherStats = stat(pathInfo.path);\n    if (otherStats !== undefined && otherStats.isDirectory()) {\n      flags |= ResolutionFlags.Merge;\n    }\n  }\n  return new ResolutionImpl(pathInfo, stats, otherStats, flags);\n}\n\nconst enum ResolutionFlags {\n  None   = 0,\n  File   = 1 << 0,\n  Dir    = 1 << 1,\n  Input  = 1 << 2,\n  Merge = 1 << 3,\n  InputDir = Dir | Input,\n}\n\nclass ResolutionImpl implements Resolution {\n  public path: Path;\n  public pathInInput: Path | undefined;\n  public relativePath: string | undefined;\n\n  constructor(\n    pathInfo: PathInfo,\n    public stats: Stats | undefined,\n    public otherStats: Stats | undefined,\n    private flags: ResolutionFlags,\n  ) {\n    this.path = pathInfo.path;\n    this.pathInInput = pathInfo.pathInInput;\n    this.relativePath = pathInfo.relativePath;\n  }\n\n  public isInput(): this is InputDirectoryResolution | InputFileResolution {\n    return this.hasFlag(ResolutionFlags.Input);\n  }\n\n  public isFile(): this is FileResolution | InputFileResolution {\n    return this.hasFlag(ResolutionFlags.File);\n  }\n\n  public isDirectory(): this is DirectoryResolution | InputDirectoryResolution {\n    return this.hasFlag(ResolutionFlags.Dir);\n  }\n\n  public isMerged(): this is MergedDirectoryResolution {\n    return this.hasFlag(ResolutionFlags.File);\n  }\n\n  public exists(): this is FileResolution | DirectoryResolution {\n    return this.stats !== undefined;\n  }\n\n  private hasFlag(flag: ResolutionFlags) {\n    return (this.flags & flag) === flag;\n  }\n}\n","import resolve from \"../fs/resolve\";\nimport { CacheDelegate, Path, PathInfo, Resolution} from \"../interfaces\";\n\nexport default class ResolutionCacheDelegate implements CacheDelegate<PathInfo, Path, Resolution> {\n  public cacheKey(pathInfo: PathInfo): Path {\n    return pathInfo.path;\n  }\n\n  public create(pathInfo: PathInfo) {\n    return resolve(pathInfo);\n  }\n}\n","import Cache from \"../cache\";\nimport { Path, PathInfo, Resolution } from \"../interfaces\";\nimport ResolutionCacheDelegate from \"./resolution-cache-delegate\";\n\nexport default class ResolutionCache extends Cache<PathInfo, Path, Resolution> {\n  constructor() {\n    super(new ResolutionCacheDelegate());\n  }\n}\n","import PathInfoCache from \"../cache/path-info-cache\";\nimport ResolutionCache from \"../cache/resolution-cache\";\nimport { Path, PathResolver, Resolution } from \"../interfaces\";\n\nexport default class PathResolverImpl implements PathResolver {\n  private pathInfoCache: PathInfoCache;\n  private resolutionCache = new ResolutionCache();\n\n  constructor(rootPath: Path, inputPath: Path) {\n    this.pathInfoCache = new PathInfoCache(rootPath, inputPath);\n  }\n\n  public resolve(path: string): Resolution {\n    const pathInfo = this.pathInfoCache.get(path);\n    return this.resolutionCache.get(pathInfo);\n  }\n\n  public reset() {\n    // PathInfo cache is not build specific\n    // resolutions are\n    this.resolutionCache.clear();\n  }\n}\n","import * as ts from \"typescript\";\nimport { readFileResolution } from \"../fs/file-utils\";\nimport { FileContent, Path, PathResolver, Resolution } from \"../interfaces\";\n\nconst SharedRegistry = ts.createDocumentRegistry();\n\ninterface VersionedSourceFile {\n  sourceFile: ts.SourceFile;\n  version: string;\n}\n\nexport default class SourceCache {\n  private bucketKey: ts.DocumentRegistryBucketKey;\n\n  private sourceFiles = new Map<Path, VersionedSourceFile>();\n\n  constructor( private resolver: PathResolver, private options: ts.CompilerOptions) {\n    this.bucketKey = SharedRegistry.getKeyForCompilationSettings(options);\n  }\n\n  public updateOptions(options: ts.CompilerOptions) {\n    const bucketKey = SharedRegistry.getKeyForCompilationSettings(options);\n    this.options = options;\n    if (this.bucketKey !== bucketKey) {\n      this.releaseAll();\n      this.bucketKey = bucketKey;\n    }\n  }\n\n  public getSourceFile(fileName: string): ts.SourceFile | undefined {\n    const resolution = this.resolve(fileName);\n    return this.getSourceFileByPath(fileName, resolution.path);\n  }\n\n  public getSourceFileByPath(fileName: string, path: Path): ts.SourceFile | undefined {\n    const resolution = this.resolve(path);\n    return this.getSourceFileByResolution(resolution, fileName, path);\n  }\n\n  public releaseUnusedSourceFiles(program: ts.Program) {\n    const bucketKey = this.bucketKey;\n    for (const path of this.sourceFiles.keys()) {\n      if (program.getSourceFileByPath(path) === undefined) {\n        SharedRegistry.releaseDocumentWithKey(path, bucketKey);\n      }\n    }\n  }\n\n  public releaseAll() {\n    const { bucketKey } = this;\n    const paths = this.sourceFiles.keys();\n    for (const path of paths) {\n      SharedRegistry.releaseDocumentWithKey(path, bucketKey);\n    }\n    this.sourceFiles.clear();\n  }\n\n  private resolve(fileName: string) {\n    return this.resolver.resolve(fileName);\n  }\n\n  private getSourceFileByResolution(resolution: Resolution, fileName: string, path: Path): ts.SourceFile | undefined {\n    const content = readFileResolution(resolution);\n    if (content) {\n      return this.getOrUpdateSourceFile(fileName, path, content);\n    }\n  }\n\n  private getOrUpdateSourceFile(fileName: string, path: Path, content: FileContent) {\n    const existing = this.sourceFiles.get(path);\n    if (existing) {\n      return this.updateSourceFile(existing, fileName, path, content);\n    } else {\n      return this.createSourceFile(fileName, path, content);\n    }\n  }\n\n  private updateSourceFile(existing: VersionedSourceFile, fileName: string, path: Path, content: FileContent) {\n    const { version } = content;\n    if (existing.version === version) {\n      return existing.sourceFile;\n    }\n    const { options, bucketKey } = this;\n    const sourceFile = SharedRegistry.updateDocumentWithKey(\n      fileName, path, options, bucketKey, snapshot(content.buffer), version);\n    existing.sourceFile = sourceFile;\n    existing.version = version;\n    return sourceFile;\n  }\n\n  private createSourceFile(fileName: string, path: Path, content: FileContent) {\n    const { options, bucketKey, sourceFiles } = this;\n    const { buffer, version } = content;\n    const sourceFile = SharedRegistry.acquireDocumentWithKey(\n        fileName, path, options, bucketKey, snapshot(buffer), version);\n    sourceFiles.set(path, { sourceFile, version });\n    return sourceFile;\n  }\n}\n\nfunction snapshot(buffer: Buffer) {\n  return ts.ScriptSnapshot.fromString(buffer.toString(\"utf8\"));\n}\n","import * as ts from \"typescript\";\nimport ConfigParser from \"./compiler/config-parser\";\nimport createCompilerHost from \"./compiler/create-compiler-host\";\nimport formatDiagnosticsHost from \"./compiler/format-diagnostics-host\";\nimport Input from \"./compiler/input-io\";\nimport OutputPatcher from \"./compiler/output-patcher\";\nimport PathResolver from \"./compiler/path-resolver\";\nimport SourceCache from \"./compiler/source-cache\";\nimport { heimdall } from \"./helpers\";\nimport { NormalizedOptions, Path } from \"./interfaces\";\n\nexport default class Compiler {\n  private resolver: PathResolver;\n  private rootPath: Path;\n  private input: Input;\n  private configParser: ConfigParser;\n  private sourceCache: SourceCache | undefined;\n  private output: OutputPatcher;\n  private program: ts.Program | undefined;\n\n  constructor(public inputPath: Path,\n              public outputPath: Path,\n              public options: NormalizedOptions) {\n    const rootPath = this.rootPath = options.rootPath;\n    const resolver = this.resolver = new PathResolver(rootPath, inputPath);\n    const input = this.input = new Input(resolver);\n    this.configParser = new ConfigParser(rootPath,\n      options.rawConfig, options.configFileName, options.compilerOptions, input);\n    this.output = new OutputPatcher(outputPath);\n  }\n\n  public compile() {\n    const config = this.parseConfig();\n\n    const sourceCache = this.getSourceCache(config.options);\n\n    const program = this.createProgram(config, sourceCache);\n\n    this.emitDiagnostics(program);\n\n    sourceCache.releaseUnusedSourceFiles(program);\n\n    this.emitProgram(program);\n\n    this.patchOutput();\n\n    this.resetCaches();\n  }\n\n  protected parseConfig() {\n    const token = heimdall.start(\"TypeScript:parseConfig\");\n    const config = this.configParser.parseConfig();\n    heimdall.stop(token);\n    return config;\n  }\n\n  protected getSourceCache(options: ts.CompilerOptions) {\n    let sourceCache = this.sourceCache;\n    if (sourceCache === undefined) {\n      sourceCache = this.sourceCache = new SourceCache(this.resolver, options);\n    } else {\n      sourceCache.updateOptions(options);\n    }\n    return sourceCache;\n  }\n\n  protected createProgram(config: ts.ParsedCommandLine, sourceCache: SourceCache): ts.Program {\n    const token = heimdall.start(\"TypeScript:createProgram\");\n\n    const host = createCompilerHost(this.rootPath, this.input, sourceCache, config.options);\n\n    const oldProgram = this.program;\n    const program = ts.createProgram(config.fileNames, config.options, host, oldProgram);\n    this.program = program;\n\n    heimdall.stop(token);\n    return program;\n  }\n\n  protected emitDiagnostics(program: ts.Program) {\n    // this is where bindings are resolved and typechecking is done\n    const token = heimdall.start(\"TypeScript:emitDiagnostics\");\n    const diagnostics = ts.getPreEmitDiagnostics(program);\n    heimdall.stop(token);\n    logDiagnostics(diagnostics);\n  }\n\n  protected emitProgram(program: ts.Program) {\n    const token = heimdall.start(\"TypeScript:emitProgram\");\n    const { input, output } = this;\n    const emitResult = program.emit(undefined, (fileName: string, data: string) => {\n      /* tslint:disable:no-console */\n      const relativePath = input.relativePath(fileName);\n      if (relativePath) {\n        output.add(relativePath, data);\n      }\n    });\n    heimdall.stop(token);\n    logDiagnostics(emitResult.diagnostics);\n  }\n\n  protected patchOutput() {\n    const token = heimdall.start(\"TypeScript:patchOutput\");\n    this.output.patch();\n    heimdall.stop(token);\n  }\n\n  protected resetCaches() {\n    this.resolver.reset();\n    this.input.reset();\n  }\n}\n\nfunction logDiagnostics(diagnostics: ts.Diagnostic[] | undefined) {\n  if (!diagnostics) {\n    return;\n  }\n  ts.sys.write(ts.formatDiagnostics(diagnostics, formatDiagnosticsHost));\n}\n","import {\n  getDirectoryPath,\n  normalizePath,\n  toPath,\n} from \"./fs/path-utils\";\nimport { CompilerOptionsConfig, NormalizedOptions, TypeScriptPluginOptions } from \"./interfaces\";\n\nexport default function normalizeOptions(options: TypeScriptPluginOptions): NormalizedOptions {\n  let rootPath = options.rootPath;\n  const tsconfig = options.tsconfig;\n\n  let configFileName: string | undefined;\n  let rawConfig: CompilerOptionsConfig | undefined;\n  if (typeof tsconfig === \"object\") {\n    configFileName = undefined;\n    rawConfig = tsconfig;\n  } else if (tsconfig) {\n    configFileName = normalizePath(tsconfig);\n    rawConfig = undefined;\n  }\n\n  if (rootPath === undefined) {\n    if (configFileName) {\n      rootPath = getDirectoryPath(configFileName);\n    } else {\n      rootPath = \".\";\n    }\n  }\n\n  return {\n    compilerOptions: options.compilerOptions,\n    configFileName,\n    rawConfig,\n    rootPath: toPath(rootPath),\n    throwOnError: options.throwOnError === true,\n  };\n}\n","import Compiler from \"./compiler\";\nimport { toPath } from \"./fs/path-utils\";\nimport { BroccoliPlugin, heimdall } from \"./helpers\";\nimport { NormalizedOptions, TypeScriptPluginOptions } from \"./interfaces\";\nimport normalizeOptions from \"./normalize-options\";\n\nexport { TypeScriptPluginOptions, TypeScriptConfig, CompilerOptionsConfig } from \"./interfaces\";\n\n/**\n * Returns a Broccoli plugin instance that compiles\n * the files in the tsconfig.\n *\n * It is rooted to the inputNode's outputPath, all\n * files it imports must be resolvable from its input\n * except for the default library file.\n *\n * Errors are logged and it will try to emit whatever\n * it could successfully compile.\n *\n * It will only emit based on the root source files\n * you give it, by default it will look for all .ts\n * files, but if you specify a files or filesGlob\n * it will these as entry points and only compile\n * the files and files they reference from the input.\n */\nexport function typescript(inputNode: any, options?: TypeScriptPluginOptions) {\n  return new TypeScriptPlugin(inputNode, options);\n}\n\n/**\n * TypeScript Broccoli plugin class.\n */\nexport class TypeScriptPlugin extends BroccoliPlugin {\n  private compiler: Compiler | undefined;\n  private options: NormalizedOptions;\n\n  constructor(inputNode: any, options?: TypeScriptPluginOptions) {\n    super([ inputNode ], {\n      annotation: options && options.annotation,\n      name: \"broccoli-typescript-compiler\",\n      persistentOutput: true,\n    });\n    this.options = normalizeOptions(options || {});\n  }\n\n  public build() {\n    const token = heimdall.start(\"TypeScript:compile\");\n    let compiler = this.compiler;\n    if (!compiler) {\n      compiler = this.compiler = new Compiler(\n        toPath( this.inputPaths[0] ),\n        toPath( this.outputPath ),\n        this.options,\n      );\n    }\n    compiler.compile();\n    heimdall.stop(token);\n  }\n}\n","import { TypeScriptPlugin, TypeScriptPluginOptions } from \"../plugin\";\n\nconst Funnel: any = require(\"broccoli-funnel\");\nconst MergeTrees: any = require(\"broccoli-merge-trees\");\n\n/**\n * Backwards compat filter behavior.\n *\n * Preserves the filter aspect of compiling only .ts\n * and passing through all other files.\n */\nexport default function filterLike(inputNode: any, options?: TypeScriptPluginOptions) {\n  const passthrough = new Funnel(inputNode, {\n    annotation: \"TypeScript passthrough\",\n    exclude: [\"**/*.ts\"],\n  });\n  const filter = new Funnel(inputNode, {\n    annotation: \"TypeScript input\",\n    include: [\"**/*.ts\"],\n  });\n  return new MergeTrees([\n    passthrough,\n    new TypeScriptPlugin(filter, options),\n  ], {\n    annotation: \"TypeScript passthrough + ouput\",\n    overwrite: true,\n  });\n}\n"],"names":["const","ts.sys","ts.getDirectoryPath","toPath","ts.normalizePath","let","ts.toPath","normalizePath","matchFiles","readConfigFile","getDirectoryPath","convertCompilerOptionsFromJson","parseJsonConfigFileContent","findConfigFile","getDefaultLibFileName","sys","NewLineKind","useCaseSensitiveFileNames","getCanonicalFileName","getNewLine","readFileSync","createHash","statSync","readdirSync","super","DirectoryEntriesCache","this","realpathSync","ts.createDocumentRegistry","ts.ScriptSnapshot","PathResolver","ts.createProgram","ts.getPreEmitDiagnostics","ts.formatDiagnostics"],"mappings":";;;;;;;;AAOOA,IAAM,yBAAyB,GAAGC,MAAM,CAAC,yBAAyB,CAAC;AAC1E,AAAOD,IAAM,oBAAoB,GAAGC,MAAM,CAAC,yBAAyB;MAChE,UAAC,QAAgB,WAAK,QAAQ,GAAA;MAC9B,UAAC,QAAgB,WAAK,QAAQ,CAAC,WAAW,EAAE,GAAA,CAAC;AAEjD,AAAOD,IAAM,kBAAkB,GAAGE,mBAAmB,CAACC,QAAM,CAACF,MAAM,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;AAE7F,yBAA8B,IAAY;IACxC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,iBAAiB,CAAC,oBAAoB,CAACG,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACxE;AAED,AAIC;AAED,4BAAmC,IAAU,EAAE,IAAU;IACvDC,IAAI,YAAgC,CAAC;IACrC,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB;QACnD,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAChD;SAAM,IAAI,IAAI,KAAK,IAAI,EAAE;QACxB,YAAY,GAAG,EAAE,CAAC;KACnB;IACD,OAAO,YAAY,CAAC;CACrB;AAED,kBAAuB,QAAgB,EAAE,QAAe;IACtDL,IAAM,CAAC,GAAGM,SAAS,CACjB,QAAQ,EACR,QAAQ,KAAK,SAAS;QACpB,gBAAgB,EAAE,GAAG,QAAQ,EAAE,oBAAoB,CAAC,CAAC;IACzD,OAAO,iBAAiB,CAAC,CAAC,CAAC,CAAC;CAC7B;AAED,AAIA,2BAA2B,IAAY;IACrC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,qBAAqB;QACvD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACvC;IACD,OAAO,IAAI,CAAC;CACb;AAED;IACE,OAAOC,eAAa,CAAC,OAAO,CAAC,GAAG,EAAE,CAAS,CAAC;CAC7C;;+BCvD6C,QAAc,EAAE,KAAc;IAC1EP,IAAM,gBAAgB,GAAG,QAAQ,CAAC;IAElC,8BAA8B,IAAY;QACxC,OAAO,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;KACzC;IAED,uBAAuB,OAAe,EAAE,UAAoB,EAAE,QAAkB,EAAE,QAAkB;QAClG,OAAOQ,aAAU,CACf,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EACvC,yBAAyB,EAAE,gBAAgB,EAAE,oBAAoB,CAAC,CAAC;KACtE;IAED,oBAAoB,IAAY;QAC9B,OAAO,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KAC/B;IAED,kBAAkB,IAAY;QAC5B,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAW,CAAC;KACvC;IAED,OAAO;QACL,YAAA,UAAU;QACV,eAAA,aAAa;QACb,UAAA,QAAQ;QACR,2BAAA,yBAAyB;KAC1B,CAAC;CACH;;ACjBD,yCAGsB,QAAc,EACd,SAA4C,EAC5C,cAAkC,EAClC,eAAkD,EAC1D,KAAY;iBAJI,GAAR,QAAQ,CAAM;kBACL,GAAT,SAAS,CAAmC;uBAC9B,GAAd,cAAc,CAAoB;wBACnB,GAAf,eAAe,CAAmC;QAEhE,CAAC,IAAI,GAAG,qBAAqB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;CACpD,CAAA;uBAEM,WAAW;QACZ,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACzB,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACzB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACjB,MAAM,GAAiB,EAAE,CAAC;QAC5B,UAGS,CAAC;QACV,cAAgC,CAAC;QACjC,CAAC,SAAS,EAAE;sBACA,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC1C,cAAc,EAAE;sBACR,GAAGC,iBAAc,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvD,UAAU,CAAC,KAAK,EAAE;sBACd,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC/B;iBAAM;yBACI,GAAG,UAAU,CAAC,MAAM,CAAC;aAC/B;SACF;KACF;QACG,CAAC,SAAS,EAAE;iBACL,GAAG,EAAE,CAAC;KAChB;QACK,QAAQ,GAAG,cAAc,GAAGC,mBAAgB,CAAC,cAAc,CAAC,GAAG,QAAQ,CAAC;QAC1E,eAA4C,CAAC;QAC7C,IAAI,CAAC,eAAe,EAAE;YAClB,aAAa,GAAGC,iCAA8B,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;uBACtE,GAAG,aAAa,CAAC,OAAO,CAAC;YACpC,aAAa,CAAC,MAAM,EAAE;kBAClB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;SACjD;KACF;QACK,MAAM,GAAGC,6BAA0B,CACvC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;UACxD,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;WACtC,MAAM,CAAC;CACf,CAAA;uBAEO,qBAAqB;WACa,GAAG,IAAI;QAAvC,IAAA,cAAc;QAAE,IAAA,QAAQ;QAAE,IAAA,IAAI,YAAhC;WACCC,iBAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,cAAc,CAAS,CAAC;CAC1E,CAAA,AACF;;4BClDC,QAAc,EAAE,KAAc,EAAE,WAAwB,EAAE,eAAgC;IAE1Fb,IAAM,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC;IAC5CA,IAAM,gBAAgB,GAAG,QAAQ,CAAC;IAClC,OAAO;QACL,eAAe,EAAE,UAAC,IAAI,WAAK,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,GAAA;QACtD,UAAU,EAAE,UAAC,IAAI,WAAK,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,GAAA;QAC5C,sBAAA,oBAAoB;QACpB,mBAAmB,EAAE,qBAAM,gBAAgB,GAAA;QAC3C,qBAAqB,EAAE,UAAC,OAAO,WAAKG,QAAM,CAACW,wBAAqB,CAAC,OAAO,CAAC,EAAE,kBAAkB,CAAC,GAAA;QAC9F,qBAAqB,EAAE,qBAAM,kBAAkB,GAAA;QAC/C,cAAc,EAAE,UAAC,IAAI,WAAK,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,GAAA;QACpD,UAAU,EAAE,qBAAM,OAAO,GAAA;QACzB,aAAa,EAAE,UAAC,QAAQ,WAAK,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAe,GAAA;QAC9E,mBAAmB,EAAE,UAAC,QAAQ,EAAE,IAAI,WAAK,WAAW,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAe,GAAA;QACtG,QAAQ,EAAE,UAAC,IAAI,WAAK,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAW,GAAA;QAClD,QAAQ,EAAE,UAAC,IAAI,WAAK,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAW,GAAA;QAClD,KAAK,EAAE,UAAC,CAAC,WAAKC,MAAG,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,GAAA;QACpC,yBAAyB,EAAE,qBAAM,yBAAyB,GAAA;QAC1D,SAAS,EAAE;;YAET,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;KACF,CAAC;CACH;AAED,oBAAoB,OAAwB;IAC1CV,IAAI,OAAO,CAAC;IACZ,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE;QACjC,OAAO,GAAGU,MAAG,CAAC,OAAO,CAAC;KACvB;SAAM;QACL,OAAO,GAAG,OAAO,CAAC,OAAO,KAAKC,cAAW,CAAC,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC;KACpE;IACD,OAAO,OAAO,CAAC;CAChB;;ACnDD,IACE,mBAAmB;AACnB,IAAA,OAAO;AACP,IAAAC,2BAAyB,oCAHrB;AAMN,gCAA8B,QAAgB;IAC5C,OAAOA,2BAAyB,GAAG,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;CACtE;AAED;IACE,OAAO,OAAO,CAAC;CAChB;AAED,4BAAe;IACb,sBAAAC,sBAAoB;IACpB,qBAAA,mBAAmB;IACnB,YAAAC,YAAU;CACc,CAAC;;2BCdL,QAAiC;iBAAzB,GAAR,QAAQ,CAAyB;aAH1C,GAAG,CAAC,CAAC;eACH,GAAG,CAAC,CAAC;cACL,GAAG,IAAI,GAAG,EAAS,CAAC;CAEhC,CAAA;gBAEM,GAAG,iBAAC,GAAM;QACT,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACzC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACjC,KAAK,KAAK,SAAS,EAAE;YACnB,CAAC,MAAM,EAAE,CAAC;aACT,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KACjC;SAAM;YACD,CAAC,IAAI,EAAE,CAAC;KACb;WACM,KAAK,CAAC;CACd,CAAA;gBAEM,KAAK;QACN,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;CACpB,CAAA,AACF;;kBCrBwB,IAAU;IACjCnB,IAAM,MAAM,GAAGoB,eAAY,CAAC,IAAI,CAAC,CAAC;IAClCpB,IAAM,IAAI,GAAGqB,iBAAU,CAAC,MAAM,CAAC,CAAC;IAChC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACpB,OAAO,EAAE,QAAA,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;CAChD;AAED,4BAAmC,UAAsB;IACvDhB,IAAI,IAAsB,CAAC;IAC3B,IAAI,UAAU,CAAC,MAAM,EAAE,EAAE;QACvB,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE;YACxB,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC;SAC/B;aAAM;YACL,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;SACxB;KACF;IACD,IAAI,IAAI,EAAE;QACR,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;KACvB;CACF;AAED,cAAqB,IAAU;IAC7B,IAAI;QACF,OAAOiB,WAAQ,CAAC,IAAI,CAAC,CAAC;KACvB;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC9C,OAAO;SACR;QACD,MAAM,CAAC,CAAC;KACT;CACF;AAED,iBAAwB,IAAU,EAAE,QAAsB;IACxDtB,IAAM,MAAM,GAAG,IAAI,GAAG,GAAG,CAAC;IAC1BA,IAAM,KAAK,GAAa,EAAE,CAAC;IAC3BA,IAAM,WAAW,GAAa,EAAE,CAAC;IACjC,KAAgB,kBAAIuB,cAAW,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,yBAAA,EAAE;QAAzCvB,IAAM,KAAK;;QACdA,IAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;QACpD,IAAI,UAAU,CAAC,MAAM,EAAE,EAAE;YACvB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnB;aAAM,IAAI,UAAU,CAAC,WAAW,EAAE,EAAE;YACnC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;IACD,OAAO,EAAE,OAAA,KAAK,EAAE,aAAA,WAAW,EAAE,CAAC;CAC/B;;AC9CD,+DACsB,QAAsB;iBAAd,GAAR,QAAQ,CAAc;CAAI,CAAA;kCAEvC,QAAQ,sBAAC,IAAU;WACjB,IAAI,CAAC;CACb,CAAA;kCAEM,MAAM,oBAAC,IAAU;WACf,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;CACrC,CAAA,AACF;;ACTD,mBAAqC;6BACvB,QAAsB;QAChCwB,QAAK,KAAA,CAAC,MAAA,IAAI,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC9C;;;;4DAAA;;;EAH0C,KAI5C,GAAA;;ACHD,2BAIsB,QAAsB;iBAAd,GAAR,QAAQ,CAAc;sBAFrB,GAA+B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAGlE,CAAC,YAAY,GAAG,IAAIC,eAAqB,CAAC,QAAQ,CAAC,CAAC;CACzD,CAAA;gBAEM,UAAU,wBAAC,IAAY;WACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;CACpC,CAAA;gBAEM,eAAe,6BAAC,IAAY;WAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;CACzC,CAAA;;;;;;gBAOM,cAAc,4BAAC,IAAY;;;QAC1B,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,WAAqB,CAAC;QACtB,UAAU,CAAC,WAAW,EAAE,EAAE;YACxB,UAAU,CAAC,OAAO,EAAE,EAAE;uBACb,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC;gBAC3D,UAAU,CAAC,QAAQ,EAAE,EAAE;qBACpBzB,IAAM,KAAK,IAAI0B,MAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE;wBACzD,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;mCAC1B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACzB;iBACF;aACF;SACF;aAAM;uBACM,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;SACzD;KACF;SAAM;mBACM,GAAG,EAAE,CAAC;KAClB;WACM,WAAW,CAAC;CACpB,CAAA;;;;;;;;gBASM,oBAAoB,kCAAC,IAAY;QAChC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,OAAmB,CAAC;QACpB,UAAU,CAAC,WAAW,EAAE,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE;eAC7C,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;KAChD;SAAM;eACE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;KAC1C;WACM,OAAO,CAAC;CAChB,CAAA;gBAEM,QAAQ,sBAAC,IAAY;QACpB,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,QAA0B,CAAC;QAC3B,UAAU,CAAC,MAAM,EAAE,EAAE;YACnB,UAAU,CAAC,OAAO,EAAE,EAAE;oBAChB,GAAG,UAAU,CAAC,WAAW,CAAC;SACnC;aAAM;oBACG,GAAG,UAAU,CAAC,IAAI,CAAC;SAC5B;KACF;QACG,QAAQ,KAAK,SAAS,EAAE;eACnBzB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAClC;CACF,CAAA;gBAEM,YAAY,0BAAC,IAAY;WACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;CACxC,CAAA;gBAEM,QAAQ,sBAAC,IAAY;QACpB,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,UAAU,CAAC,OAAO,EAAE,EAAE;eACjB,UAAU,CAAC,IAAI,CAAC;KACxB;SAAM,IAAI,UAAU,CAAC,MAAM,EAAE,EAAE;YACxB,QAAQ,GAAG0B,eAAY,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;eAC5D,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;KACpC;CACF,CAAA;gBAEM,KAAK;QACN,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;CAC1C,CAAA;gBAEO,OAAO,qBAAC,IAAY;WACnB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;CACpC,CAAA;gBAEO,OAAO,qBAAC,IAAU;WACjB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;CACpC,CAAA,AACF;;AC3GM3B,IAAM,MAAM,GAAkB,OAAO,CAAC,cAAc,CAAC,CAAC;AAC7D,AAAOA,IAAM,cAAc,GAA0B,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAChF,AAAOA,IAAM,QAAQ,GAAa,OAAO,CAAC,WAAW,CAAC,CAAC;AACvD,AAAOA,IAAM,MAAM,GAAW,OAAO,CAAC,SAAS,CAAC,CAAC;AACjD,AAAOA,IAAM,QAAQ,GAAa,OAAO,CAAC,YAAY,CAAC,CAAC;;ACDxD,2CAMsB,UAAkB;mBAAR,GAAV,UAAU,CAAQ;gBALvB,GAAqB,EAAE,CAAC;iBACvB,GAAG,IAAI,GAAG,EAAkB,CAAC;iBAC7B,GAAuB,SAAS,CAAC;QAI3C,CAAC,WAAW,GAAG,UAAC,MAAM,EAAE,MAAM;YAC5B,MAAM,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE;mBACzC,IAAI,CAAC;SACb;YACG,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,EAAE;mBAC/D,IAAI,CAAC;SACb;eACM,KAAK,CAAC;KACd,CAAC;CACH,CAAA;;wBAGM,GAAG,iBAAC,YAAoB,EAAE,OAAe;QAC1C,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;CAC1C,CAAA;wBAEM,KAAK;QACN;YACE,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;KAC/B;WAAQ,CAAC,EAAE;;YAEN,CAAC,QAAQ,GAAG,SAAS,CAAC;cACpB,CAAC,CAAC;KACT;YAAS;YACJ,CAAC,OAAO,GAAG,EAAE,CAAC;YACd,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAkB,CAAC;KAC3C;CACF,CAAA;wBAEO,MAAM;QACN,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACzB,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACvB,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC/B,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAC7B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACzB,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;QAClE,CAAC,QAAQ,EAAE;gBACL,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;KAC7D;QACK,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;SACxD,CAAC,OAAO,CAAC,UAAC,MAAM;YACb,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACjB,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAChB,EAAE;iBACH,OAAO;;4BAEE,CAAC,UAAU,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;sBAChC;iBACH,OAAO;;4BAEE,CAAC,UAAU,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;sBAChC;iBACH,QAAQ;6BACE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;sBACxB;iBACH,QAAQ,CAAC;iBACT,QAAQ;gCACK,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;sBAC/C;qBACC,MAAM,IAAI,KAAK,EAAC,uBAAqB,EAAE,EAAG,CAAC;SACrD;KACF,CAAC,CAAC;WACI,QAAQ,CAAC;CACjB,CAAA;;;AAIH,2BAMqB,QAAgB,EAAS,YAAoB,EAAS,QAAgB;iBAA9D,GAAR,QAAQ,CAAQ;qBAAqB,GAAZ,YAAY,CAAQ;iBAAiB,GAAR,QAAQ,CAAQ;aAJ9E,GAAW,CAAC,CAAC;aACb,GAAW,CAAC,CAAC;cACZ,GAAS,IAAI,IAAI,EAAE,CAAC;QAG1B,CAAC,QAAQ,GAAG,QAAQ,GAAG,GAAG,GAAG,YAAY,CAAC;QAC1C,CAAC,QAAQ,GAAG,QAAQ,CAAC;CAC1B,CAAA;gBAEM,WAAW;WACT,KAAK,CAAC;CACd,CAAA;;mBCzF+B,QAAc,EAAE,SAAe,EAAE,OAAe;IAChFK,IAAI,IAAI,GAAGF,QAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACrCE,IAAI,WAA6B,CAAC;IAClCA,IAAI,YAAY,GAAG,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACtD,IAAI,YAAY,KAAK,SAAS,EAAE;QAC9B,YAAY,GAAG,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACnD,IAAI,YAAY,KAAK,SAAS,EAAE;YAC9B,WAAW,GAAG,IAAI,CAAC;YACnB,IAAI,GAAGF,QAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;SACvC;KACF;SAAM;QACL,WAAW,GAAGA,QAAM,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;KAC/C;IACD,OAAO;QACL,MAAA,IAAI;QACJ,aAAA,WAAW;QACX,cAAA,YAAY;KACb,CAAC;CACH;;AClBD,2DACsB,QAAc,EAAU,SAAe;iBAA/B,GAAR,QAAQ,CAAM;kBAAmB,GAAT,SAAS,CAAM;CAC1D,CAAA;gCAEM,QAAQ,sBAAC,GAAW;WAClB,GAAG,CAAC;CACZ,CAAA;gCAEM,MAAM,oBAAC,GAAW;WAChB,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;CACtD,CAAA,AACF;;ACVD,iBAAmC;2BACrB,QAAc,EAAE,SAAe;QACzCqB,QAAK,KAAA,CAAC,MAAA,IAAI,qBAAqB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;KACvD;;;;wDAAA;;;EAHwC,KAI1C,GAAA;;iBCK+B,QAAkB;IAChDnB,IAAI,KAAK,KAAwB;IACjCA,IAAI,KAAwB,CAAC;IAC7BA,IAAI,UAA6B,CAAC;IAClC,IAAI,QAAQ,CAAC,WAAW,EAAE;QACxB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACnC,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,KAAK,kBAA0B;SAChC;KACF;IACD,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC7B;IACD,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,8BAA8C;KAC3E;IACD,IAAI,CAAC,KAAK,2CAA2D;QACnE,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,CAAC,WAAW,EAAE,EAAE;YACxD,KAAK,kBAA0B;SAChC;KACF;IACD,OAAO,IAAI,cAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;CAC/D;AAWD,6CAMI,QAAkB,EACX,KAAwB,EACxB,UAA6B,EAC5B,KAAsB;cAFlB,GAAL,KAAK,CAAmB;mBACd,GAAV,UAAU,CAAmB;cACvB,GAAL,KAAK,CAAiB;QAE1B,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QACtB,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACpC,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;CAC3C,CAAA;yBAEM,OAAO;WACL,IAAI,CAAC,OAAO,eAAuB,CAAC;CAC5C,CAAA;yBAEM,MAAM;WACJ,IAAI,CAAC,OAAO,cAAsB,CAAC;CAC3C,CAAA;yBAEM,WAAW;WACT,IAAI,CAAC,OAAO,aAAqB,CAAC;CAC1C,CAAA;yBAEM,QAAQ;WACN,IAAI,CAAC,OAAO,cAAsB,CAAC;CAC3C,CAAA;yBAEM,MAAM;WACJ,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC;CACjC,CAAA;yBAEO,OAAO,qBAAC,IAAqB;WAC5B,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,MAAM,IAAI,CAAC;CACrC,CAAA;;AClFH;;kCACS,QAAQ,sBAAC,QAAkB;WACzB,QAAQ,CAAC,IAAI,CAAC;CACtB,CAAA;kCAEM,MAAM,oBAAC,QAAkB;WACvB,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC1B,CAAA,AACF;;ACPD,mBAAqC;;QAEjCmB,QAAK,KAAA,CAAC,MAAA,IAAI,uBAAuB,EAAE,CAAC,CAAC;KACtC;;;;4DAAA;;;EAH0C,KAI5C,GAAA;;ACJD,iDAIc,QAAc,EAAE,SAAe;wBAFpB,GAAG,IAAI,eAAe,EAAE,CAAC;QAG1C,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;CAC7D,CAAA;2BAEM,OAAO,qBAAC,IAAY;QACnB,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;WACvC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;CAC3C,CAAA;2BAEM,KAAK;;;QAGN,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;CAC9B,CAAA,AACF;;AClBDxB,IAAM,cAAc,GAAG4B,yBAAyB,EAAE,CAAC;AAOnD,uCAKuB,QAAsB,EAAU,OAA2B;iBAAnD,GAAR,QAAQ,CAAc;gBAAiB,GAAP,OAAO,CAAoB;oBAF7D,GAAG,IAAI,GAAG,EAA6B,CAAC;QAGrD,CAAC,SAAS,GAAG,cAAc,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;CACvE,CAAA;sBAEM,aAAa,2BAAC,OAA2B;QACxC,SAAS,GAAG,cAAc,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;QACnE,CAAC,OAAO,GAAG,OAAO,CAAC;QACnB,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YAC5B,CAAC,UAAU,EAAE,CAAC;YACd,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;CACF,CAAA;sBAEM,aAAa,2BAAC,QAAgB;QAC7B,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;WACnC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;CAC5D,CAAA;sBAEM,mBAAmB,iCAAC,QAAgB,EAAE,IAAU;QAC/C,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;WAC/B,IAAI,CAAC,yBAAyB,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;CACnE,CAAA;sBAEM,wBAAwB,sCAAC,OAAmB;;;QAC3C,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;SAClB,kBAAIF,MAAI,CAAC,WAAW,CAAC,IAAI,EAAE,yBAAA,EAAE;YAAjC,IAAI;;YACb,IAAI,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;0BACrC,CAAC,sBAAsB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SACxD;KACF;CACF,CAAA;sBAEM,UAAU;WACI,GAAG,IAAI;QAAlB,IAAA,SAAS,iBAAX;QACA,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACvB,kBAAI,KAAK,yBAAA,EAAE;YAAf,IAAI;;YACb,cAAc,CAAC,sBAAsB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KACxD;QACG,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;CAC1B,CAAA;sBAEO,OAAO,qBAAC,QAAgB;WACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;CACxC,CAAA;sBAEO,yBAAyB,uCAAC,UAAsB,EAAE,QAAgB,EAAE,IAAU;QAC9E,OAAO,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAC3C,OAAO,EAAE;eACJ,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KAC5D;CACF,CAAA;sBAEO,qBAAqB,mCAAC,QAAgB,EAAE,IAAU,EAAE,OAAoB;QACxE,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACxC,QAAQ,EAAE;eACL,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACjE;SAAM;eACE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACvD;CACF,CAAA;sBAEO,gBAAgB,8BAAC,QAA6B,EAAE,QAAgB,EAAE,IAAU,EAAE,OAAoB;QAChG,OAAO,mBAAT;QACF,QAAQ,CAAC,OAAO,KAAK,OAAO,EAAE;eACzB,QAAQ,CAAC,UAAU,CAAC;KAC5B;WAC2B,GAAG,IAAI;QAA3B,IAAA,OAAO;QAAE,IAAA,SAAS,iBAApB;QACA,UAAU,GAAG,cAAc,CAAC,qBAAqB,CACrD,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;YACjE,CAAC,UAAU,GAAG,UAAU,CAAC;YACzB,CAAC,OAAO,GAAG,OAAO,CAAC;WACpB,UAAU,CAAC;CACnB,CAAA;sBAEO,gBAAgB,8BAAC,QAAgB,EAAE,IAAU,EAAE,OAAoB;WAChC,GAAG,IAAI;QAAxC,IAAA,OAAO;QAAE,IAAA,SAAS;QAAE,IAAA,WAAW,mBAAjC;QACE,MAAM;QAAE,IAAA,OAAO,mBAAjB;QACA,UAAU,GAAG,cAAc,CAAC,sBAAsB,CACpD,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;eACxD,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,YAAA,UAAU,EAAE,SAAA,OAAO,EAAE,CAAC,CAAC;WACxC,UAAU,CAAC;CACnB,CAAA;;AAGH,kBAAkB,MAAc;IAC9B,OAAOG,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;CAC9D;;AC3FD,iCASqB,SAAe,EACf,UAAgB,EAChB,OAA0B;kBAFjB,GAAT,SAAS,CAAM;mBACL,GAAV,UAAU,CAAM;gBACT,GAAP,OAAO,CAAmB;QACrC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAC5C,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAIC,gBAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACjE,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3C,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,QAAQ,EAC3C,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QACzE,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,UAAU,CAAC,CAAC;CAC7C,CAAA;mBAEM,OAAO;QACN,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE5B,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAElD,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEpD,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;eAEnB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;QAE1C,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAEtB,CAAC,WAAW,EAAE,CAAC;QAEf,CAAC,WAAW,EAAE,CAAC;CACpB,CAAA;mBAES,WAAW;QACb,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;QACjD,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YACvC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;WACd,MAAM,CAAC;CACf,CAAA;mBAES,cAAc,4BAAC,OAA2B;QAC9C,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC/B,WAAW,KAAK,SAAS,EAAE;mBAClB,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;KAC1E;SAAM;mBACM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;KACpC;WACM,WAAW,CAAC;CACpB,CAAA;mBAES,aAAa,8BAAC,MAA4B,EAAE,WAAwB;QACtE,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAEnD,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAElF,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;QAC1B,OAAO,GAAGC,gBAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QACjF,CAAC,OAAO,GAAG,OAAO,CAAC;YAEf,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;WACd,OAAO,CAAC;CAChB,CAAA;mBAES,eAAe,6BAAC,OAAmB;;QAErC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QACrD,WAAW,GAAGC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YAC9C,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;kBACP,CAAC,WAAW,CAAC,CAAC;CAC7B,CAAA;mBAES,WAAW,yBAAC,OAAmB;QACjC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;WAChC,GAAG,IAAI;QAAtB,IAAA,KAAK;QAAE,IAAA,MAAM,cAAf;QACA,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,UAAC,QAAgB,EAAE,IAAY;;YAElE,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC9C,YAAY,EAAE;kBACV,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAChC;KACF,CAAC,CAAC;YACK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;kBACP,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;CACxC,CAAA;mBAES,WAAW;QACb,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;QACnD,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACZ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACtB,CAAA;mBAES,WAAW;QACf,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAClB,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;CACpB,CAAA;;AAGH,wBAAwB,WAAwC;IAC9D,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO;KACR;IACD/B,MAAM,CAAC,KAAK,CAACgC,oBAAoB,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC,CAAC;CACxE;;0BC/GwC,OAAgC;IACvE5B,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IAChCL,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IAElCK,IAAI,cAAkC,CAAC;IACvCA,IAAI,SAA4C,CAAC;IACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAChC,cAAc,GAAG,SAAS,CAAC;QAC3B,SAAS,GAAG,QAAQ,CAAC;KACtB;SAAM,IAAI,QAAQ,EAAE;QACnB,cAAc,GAAGE,eAAa,CAAC,QAAQ,CAAC,CAAC;QACzC,SAAS,GAAG,SAAS,CAAC;KACvB;IAED,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,IAAI,cAAc,EAAE;YAClB,QAAQ,GAAGG,mBAAgB,CAAC,cAAc,CAAC,CAAC;SAC7C;aAAM;YACL,QAAQ,GAAG,GAAG,CAAC;SAChB;KACF;IAED,OAAO;QACL,eAAe,EAAE,OAAO,CAAC,eAAe;QACxC,gBAAA,cAAc;QACd,WAAA,SAAS;QACT,QAAQ,EAAEP,QAAM,CAAC,QAAQ,CAAC;QAC1B,YAAY,EAAE,OAAO,CAAC,YAAY,KAAK,IAAI;KAC5C,CAAC;CACH;;;;;;;;;;;;;;;;;;;ACXD,oBAA2B,SAAc,EAAE,OAAiC;IAC1E,OAAO,IAAI,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;CACjD;;;;AAKD,oBAA8B;8BAIhB,SAAc,EAAE,OAAiC;QAC3DqB,iBAAK,KAAA,CAAC,MAAA,CAAE,SAAS,CAAE,EAAE;YACnB,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU;YACzC,IAAI,EAAE,8BAA8B;YACpC,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;KAChD;;;;8DAAA;IAEM,2BAAA,KAAK;QACVxB,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACnDK,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CACrCF,QAAM,CAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAE,EAC5BA,QAAM,CAAE,IAAI,CAAC,UAAU,CAAE,EACzB,IAAI,CAAC,OAAO,CACb,CAAC;SACH;QACD,QAAQ,CAAC,OAAO,EAAE,CAAC;QACnB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACtB,CAAA;;;EAzBmC,cA0BrC,GAAA;;ACxDDH,IAAM,MAAM,GAAQ,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC/CA,IAAM,UAAU,GAAQ,OAAO,CAAC,sBAAsB,CAAC,CAAC;;;;;;;AAQxD,oBAAmC,SAAc,EAAE,OAAiC;IAClFA,IAAM,WAAW,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE;QACxC,UAAU,EAAE,wBAAwB;QACpC,OAAO,EAAE,CAAC,SAAS,CAAC;KACrB,CAAC,CAAC;IACHA,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE;QACnC,UAAU,EAAE,kBAAkB;QAC9B,OAAO,EAAE,CAAC,SAAS,CAAC;KACrB,CAAC,CAAC;IACH,OAAO,IAAI,UAAU,CAAC;QACpB,WAAW;QACX,IAAI,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,EACtC,EAAE;QACD,UAAU,EAAE,gCAAgC;QAC5C,SAAS,EAAE,IAAI;KAChB,CAAC,CAAC;CACJ;;;;;;;;;;"}