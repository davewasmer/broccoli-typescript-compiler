{"version":3,"file":"plugin.js","sources":["../src/plugin.ts","../src/compiler.ts","../src/output-patcher.ts","../src/source-cache.ts","../src/utils.ts","../src/helpers.ts"],"sourcesContent":["import { BroccoliPlugin, getCallerFile, heimdall } from \"./helpers\";\nimport { readConfig, findConfig } from \"./utils\";\nimport Compiler from \"./compiler\";\n\nexport interface TypeScriptOptions {\n  tsconfig?: Object | string | undefined;\n  annotation?: string | undefined;\n}\n\nexport { findConfig } from \"./utils\";\n\nexport class TypeScript extends BroccoliPlugin {\n\n  config: Object;\n  configFileName: string | undefined;\n  host: Compiler | undefined;\n\n  constructor(inputTree: any, options?: TypeScriptOptions | undefined) {\n    super([ inputTree ], {\n      name: \"broccoli-typescript-compiler\",\n      persistentOutput: true,\n      annotation: options && options.annotation\n    });\n\n    let configFileName: string | undefined;\n    let config: any;\n    if (!options || !options.tsconfig) {\n      configFileName = findConfig(getCallerFile(2));\n      config = readConfig(configFileName);\n    } else if (typeof options.tsconfig === \"string\") {\n      configFileName = options.tsconfig;\n      config = readConfig(configFileName);\n    } else {\n      configFileName = undefined;\n      config = options.tsconfig;\n    }\n\n    this.config = config;\n    this.configFileName = configFileName;\n  }\n\n  build() {\n    let token = heimdall.start(\"TypeScript:compile\");\n    let inputPath = this.inputPaths[0];\n    let { host } = this;\n    if (!host) {\n      host = this.host = new Compiler(this.outputPath, inputPath, this.config, this.configFileName);\n    } else {\n      host.updateInput(inputPath);\n    }\n    host.compile();\n    heimdall.stop(token);\n  }\n}\n","import * as ts from \"typescript\";\nimport SourceCache from \"./source-cache\";\nimport OutputPatcher from \"./output-patcher\";\nimport { heimdall } from \"./helpers\";\nimport { createParseConfigHost, formatDiagnosticsHost } from \"./utils\";\n\nconst { sys } = ts;\n\nexport default class Compiler {\n  public config: ts.ParsedCommandLine;\n\n  private output: OutputPatcher;\n  public input: SourceCache;\n  private host: ts.LanguageServiceHost;\n  private languageService: ts.LanguageService;\n  private program: ts.Program;\n\n  constructor(public outputPath: string, public inputPath: string, public rawConfig: any, public configFileName: string | undefined) {\n    let output = new OutputPatcher(outputPath);\n    let config = parseConfig(inputPath, rawConfig, configFileName, undefined);\n    logDiagnostics(config.errors);\n    let input = new SourceCache(inputPath, config.options);\n    this.output = output;\n    this.config = config;\n    this.input = input;\n    this.host = createLanguageServiceHost(this);\n    this.languageService = ts.createLanguageService(this.host, ts.createDocumentRegistry());\n  }\n\n  public updateInput(inputPath: string) {\n    // the config builds the list of files\n    let token = heimdall.start(\"TypeScript:updateInput\");\n    let config = this.config = parseConfig(inputPath, this.rawConfig, this.configFileName, this.config.options);\n    logDiagnostics(config.errors);\n    if (this.inputPath !== inputPath) {\n      this.inputPath = inputPath;\n      this.config = config;\n      this.input = new SourceCache(inputPath, config.options);\n    } else {\n      this.input.updateCache();\n    }\n    heimdall.stop(token);\n  }\n\n  public compile() {\n    this.createProgram();\n    this.emitDiagnostics();\n    this.emitProgram();\n    this.patchOutput();\n  }\n\n  protected createProgram() {\n    let { languageService } = this;\n    let token = heimdall.start(\"TypeScript:createProgram\");\n    this.program = languageService.getProgram();\n    heimdall.stop(token);\n  }\n\n  protected emitDiagnostics() {\n    // this is where bindings are resolved and typechecking is done\n    let token = heimdall.start(\"TypeScript:emitDiagnostics\");\n    let diagnostics = ts.getPreEmitDiagnostics(this.program);\n    logDiagnostics(diagnostics);\n    heimdall.stop(token);\n  }\n\n  protected emitProgram() {\n    let token = heimdall.start(\"TypeScript:emitProgram\");\n    let emitResult = this.program.emit(undefined, (fileName: string, data: string) => {\n      this.output.add(fileName.slice(1), data);\n    });\n    logDiagnostics(emitResult.diagnostics);\n    heimdall.stop(token);\n  }\n\n  protected patchOutput() {\n    let token = heimdall.start(\"TypeScript:patchOutput\");\n    this.output.patch();\n    heimdall.stop(token);\n  }\n}\n\nfunction logDiagnostics(diagnostics: ts.Diagnostic[] | undefined) {\n  if (!diagnostics) return;\n  sys.write(ts.formatDiagnostics(diagnostics, formatDiagnosticsHost));\n}\n\nfunction parseConfig(inputPath: string, rawConfig: any, configFileName: string | undefined, previous?: ts.CompilerOptions) {\n  let host = createParseConfigHost(inputPath);\n  return ts.parseJsonConfigFileContent(rawConfig, host, rawConfig.compilerOptions.baseUrl, previous, configFileName);\n}\n\nfunction createLanguageServiceHost(compiler: Compiler): ts.LanguageServiceHost {\n  return {\n    getCurrentDirectory() {\n      return process.cwd();\n    },\n    getCompilationSettings() {\n      // PROBLEM: this is returning basePath: '/'\n      return compiler.config.options;\n    },\n    getNewLine() {\n      return _getNewLine(compiler.config.options);\n    },\n    getScriptFileNames(): string[] {\n      // PROBLEM: this is returning absolute paths\n      return compiler.config.fileNames;\n    },\n    getScriptVersion(fileName: string): string {\n      return \"\" + compiler.input.getScriptVersion(fileName);\n    },\n    getScriptSnapshot(fileName: string): ts.IScriptSnapshot | undefined {\n      return compiler.input.getScriptSnapshot(fileName);\n    },\n    getDefaultLibFileName() {\n      return compiler.input.libFileName;\n    },\n    fileExists(fileName) {\n      return compiler.input.fileExists(fileName);\n    },\n    readFile(fileName) {\n      console.log('langague host readFile:', fileName);\n      return compiler.input.readFile(fileName);\n    }\n  };\n}\n\nfunction _getNewLine(options: ts.CompilerOptions): string {\n  let newLine;\n  if (options.newLine === undefined) {\n    newLine = sys.newLine;\n  } else {\n    newLine = options.newLine === ts.NewLineKind.LineFeed ? \"\\n\" : \"\\r\\n\";\n  }\n  return newLine;\n}\n","import * as fs from \"fs\";\nimport { md5Hex, walkSync, WalkSync, FSTree } from \"./helpers\";\nimport { createMap } from \"./utils\";\n\nexport default class OutputPatcher {\n  private entries: WalkSync.Entry[] = [];\n  private contents = createMap<string>();\n  private lastTree: FSTree | undefined = undefined;\n  private isUnchanged: (a: Entry, b: Entry) => boolean;\n\n  constructor(private outputPath: string) {\n    this.isUnchanged = (entryA, entryB) => {\n      if (entryA.isDirectory() && entryB.isDirectory()) {\n        return true;\n      }\n      if (entryA.mode === entryB.mode && entryA.checksum === entryB.checksum) {\n        return true;\n      }\n      return false;\n    };\n  }\n\n  // relativePath should be without leading '/' and use forward slashes\n  public add(relativePath: string, content: string): void {\n    this.entries.push(new Entry(this.outputPath, relativePath, md5Hex(content)));\n    this.contents[relativePath] = content;\n  }\n\n  public patch() {\n    try {\n      this.lastTree = this._patch();\n    } catch (e) {\n      // walkSync(output);\n      this.lastTree = undefined;\n      throw e;\n    } finally {\n      this.entries = [];\n      this.contents = Object.create(null);\n    }\n  }\n\n  private _patch() {\n    let { entries, lastTree, isUnchanged, outputPath, contents } = this;\n    let nextTree = FSTree.fromEntries(entries, {\n      sortAndExpand: true\n    });\n    if (!lastTree) {\n      lastTree = FSTree.fromEntries(walkSync.entries(outputPath));\n    }\n    let patch = lastTree.calculatePatch(nextTree, isUnchanged);\n    patch.forEach(([op, path, entry]) => {\n      switch (op) {\n        case \"mkdir\":\n          // the expanded dirs don't have a base\n          fs.mkdirSync(outputPath + \"/\" + path);\n          break;\n        case \"rmdir\":\n          // the expanded dirs don't have a base\n          fs.rmdirSync(outputPath + \"/\" + path);\n          break;\n        case \"unlink\":\n          fs.unlinkSync(entry.fullPath);\n          break;\n        case \"create\":\n        case \"change\":\n          fs.writeFileSync(entry.fullPath, contents[path]);\n          break;\n      }\n    });\n    return nextTree;\n  }\n}\n\nclass Entry implements WalkSync.Entry {\n  public fullPath: string;\n  public mode: number = 0;\n  public size: number = 0;\n  public mtime: Date = new Date();\n\n  constructor(public basePath: string, public relativePath: string, public checksum: string) {\n    this.fullPath = basePath + \"/\" + relativePath;\n    this.checksum = checksum;\n  }\n\n  isDirectory() {\n    return false;\n  }\n}\n","import * as path from 'path';\nimport * as fs from 'fs';\nimport { FSTree, walkSync } from \"./helpers\";\nimport { createMap } from \"./utils\";\nimport { sys, CompilerOptions, getDefaultLibFilePath, IScriptSnapshot, ScriptSnapshot, getDefaultLibFileName } from 'typescript';\n\nexport default class SourceCache {\n  private lastTree: FSTree | undefined = undefined;\n  private cache = createMap<{\n    content: string | undefined,\n    version: number\n  }>();\n  private charset: string | undefined;\n  public libFileName: string;\n  private libFiles: string[];\n  private libDirPath: string;\n\n  constructor(public inputPath: string,\n              public options: CompilerOptions) {\n    this.charset = options.charset;\n    this.libFileName = getDefaultLibFileName(options);\n    this.libDirPath = path.dirname(getDefaultLibFilePath(options));\n    this.libFiles = fs.readdirSync(this.libDirPath);\n  }\n\n  public updateCache() {\n    let nextTree = FSTree.fromEntries(walkSync.entries(this.inputPath));\n    let cache = this.cache;\n    let lastTree = this.lastTree;\n    if (lastTree) {\n      lastTree.calculatePatch(nextTree).forEach(([op, path]) => {\n        switch (op) {\n          case \"unlink\":\n            cache[\"/\" + path] = undefined;\n            break;\n          case \"change\":\n            let file = cache[\"/\" + path];\n            if (file) {\n              file.content = undefined;\n              file.version++;\n            }\n            break;\n        }\n      });\n    }\n    this.lastTree = nextTree;\n  }\n\n  public realPath(fileName) {\n    if (this.libFiles.indexOf(fileName) > -1) {\n      return path.join(this.libDirPath, fileName);\n    }\n    return path.join(this.inputPath, fileName);\n  }\n\n  public fileExists(fileName) {\n    return sys.fileExists(this.realPath(fileName));\n  }\n\n  public getScriptVersion(fileName: string): number | undefined {\n    let file = this.cache[fileName];\n    return file && file.version;\n  }\n\n  public getScriptSnapshot(fileName: string): IScriptSnapshot | undefined {\n    let text = this.readFile(fileName);\n    return text ? ScriptSnapshot.fromString(this.readFile(fileName)) : undefined;\n  }\n\n  public readFile(fileName: string): string {\n    console.log('source cache readFile:', fileName);\n    let { cache } = this;\n    let file = cache[fileName];\n    if (file === undefined) {\n      file = cache[fileName] = {\n        content: undefined,\n        version: 0\n      };\n    }\n    let content;\n    if (file.content) {\n      content = file.content;\n    } else {\n      content = file.content = sys.readFile(this.realPath(fileName), this.charset);\n    }\n    return content;\n  }\n}\n\n","import { sys, readConfigFile, formatDiagnostics, FormatDiagnosticsHost, ParseConfigHost } from \"typescript\";\nimport { findup } from \"./helpers\";\nimport { join } from \"path\";\n\nconst { create: createObject } = Object;\nconst { newLine, useCaseSensitiveFileNames, getCurrentDirectory } = sys;\n\nexport function getCanonicalFileName(fileName: string): string {\n  return useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();\n}\n\nexport function getNewLine(): string {\n  return newLine;\n}\n\nexport const formatDiagnosticsHost: FormatDiagnosticsHost = {\n  getCurrentDirectory,\n  getCanonicalFileName,\n  getNewLine\n};\n\nexport function findConfig(root: string): string {\n  return join(findup.sync(root, \"package.json\"), \"tsconfig.json\");\n}\n\nexport function readConfig(configFile: string): any {\n  let result = readConfigFile(configFile, sys.readFile);\n  if (result.error) {\n    let message = formatDiagnostics([result.error], formatDiagnosticsHost);\n    throw new Error(message);\n  }\n  return result.config;\n}\n\nexport function createParseConfigHost(inputPath: string): ParseConfigHost {\n  let rootLength = inputPath.length;\n  let stripRoot = fileName => fileName.slice(rootLength + 1);\n  let realPath = fileName => {\n    console.log('parse host realPath:', fileName)\n    return inputPath + fileName;\n  };\n  let fileExists = path => sys.fileExists(realPath(path));\n  let readDirectory = (rootDir, extensions, excludes, includes) => {\n    console.log('parse host readDirectory:', rootDir);\n    return sys.readDirectory(realPath(rootDir), extensions, excludes, includes).map(stripRoot);\n  };\n  let readFile = path => {\n    console.log('parse host readFile:', path);\n    return sys.readFile(realPath(path));\n  };\n  const { useCaseSensitiveFileNames } = sys;\n  return {\n    useCaseSensitiveFileNames,\n    fileExists,\n    readDirectory,\n    readFile,\n  };\n}\n\nexport interface Map<T> {\n  [key: string]: T | undefined;\n}\n\nexport function createMap<T>(): Map<T> {\n    const map: Map<T> = createObject(null);\n    map[\"__\"] = undefined;\n    delete map[\"__\"];\n    return map;\n}","export const FSTree: FSTree.Static = require(\"fs-tree-diff\");\nexport const BroccoliPlugin: BroccoliPlugin.Static = require(\"broccoli-plugin\");\nexport const walkSync: WalkSync = require(\"walk-sync\");\nexport const md5Hex: MD5Hex = require(\"md5-hex\");\nexport const findup: FindUp = require(\"findup\");\nexport const getCallerFile: GetCallerFile = require(\"get-caller-file\");\nexport const heimdall: Heimdall = require(\"heimdalljs\");\n\ndeclare function require(id: string): any;\n\nexport interface Token {}\nexport interface Heimdall {\n  start(name: string): Token;\n  stop(token: Token);\n}\n\nexport interface MD5Hex {\n  (str: string): string;\n}\n\nexport interface GetCallerFile {\n  (pos?: number): string;\n}\n\nexport interface FindUp {\n  sync(dir: string, file: string): string;\n}\n\nexport namespace BroccoliPlugin {\n  export interface PluginOptions {\n    name?: string;\n    annotation?: string;\n    persistentOutput?: boolean;\n  }\n\n  export interface Plugin {\n    inputPaths: string[];\n    outputPath: string;\n    cachePath: string;\n  }\n\n  export interface Static {\n    new (inputNodes: any[], options?: any): Plugin;\n  }\n}\n\nexport interface WalkSync {\n  (path: string, options?: WalkSync.Options): string[];\n  entries(path: string, options?: WalkSync.Options): WalkSync.Entry[];\n}\n\nexport namespace WalkSync {\n  export type Row = string | RegExp[];\n\n  export type Options = {\n    globs?: (string | { match(): boolean })[];\n  };\n\n  export interface Entry {\n    relativePath: string;\n    basePath: string;\n    fullPath: string;\n    mode: number;\n    size: number;\n    mtime: Date;\n    isDirectory(): boolean;\n  }\n}\n\nexport interface FSTree {\n  calculatePatch(next: FSTree, isUnchanged?: (a: WalkSync.Entry, b: WalkSync.Entry) => {}): FSTree.PatchOp[];\n}\n\nexport namespace FSTree {\n  export type Op = \"unlink\" | \"create\" | \"mkdir\" | \"rmdir\" | \"change\";\n\n  export type PatchOp = [Op, string, WalkSync.Entry];\n\n  export interface Static {\n    fromEntries(entries: WalkSync.Entry[], options?: {\n      sortAndExpand?: boolean\n    }): FSTree;\n  }\n}\n"],"names":["let","super","ts.NewLineKind","sys","ts.parseJsonConfigFileContent","ts.formatDiagnostics","ts.getPreEmitDiagnostics","ts.createLanguageService","ts.createDocumentRegistry","fs.writeFileSync","path","fs.unlinkSync","fs.rmdirSync","fs.mkdirSync","ScriptSnapshot","path.join","fs.readdirSync","path.dirname","getDefaultLibFilePath","getDefaultLibFileName","const","formatDiagnostics","readConfigFile","join","getNewLine","getCurrentDirectory"],"mappings":"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"}